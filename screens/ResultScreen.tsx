import React from 'react';
import { View, Text, StyleSheet, SafeAreaView, TouchableOpacity, ScrollView } from 'react-native';
import { useNavigation, useRoute, RouteProp } from '@react-navigation/native';
import type { NativeStackNavigationProp } from '@react-navigation/native-stack';
import { Ionicons } from '@expo/vector-icons';
import { RootStackParamList } from '../types';

type ResultScreenNavigationProp = NativeStackNavigationProp<RootStackParamList, 'Result'>;
type ResultScreenRouteProp = RouteProp<RootStackParamList, 'Result'>;

const ResultScreen: React.FC = () => {
  const navigation = useNavigation<ResultScreenNavigationProp>();
  const route = useRoute<ResultScreenRouteProp>();
  const { result } = route.params;

  // Format confidence as percentage
  const confidencePercentage = Math.round(result.confidence * 100);

  // Determine result color and icon based on prediction
  const isAI = result.isAI;
  const resultColor = isAI ? '#FF3B30' : '#4CD964';
  const resultIcon = isAI ? 'alert-circle' : 'checkmark-circle';
  const resultText = isAI ? 'Fake' : 'Genuine';

  return (
    <SafeAreaView style={styles.container}>
      <View style={styles.header}>
        <TouchableOpacity
          style={styles.backButton}
          onPress={() => navigation.goBack()}
        >
          <Ionicons name="arrow-back" size={24} color="#007AFF" />
        </TouchableOpacity>
        <Text style={styles.headerTitle}>Analysis Result</Text>
        <TouchableOpacity
          style={styles.homeButton}
          onPress={() => navigation.navigate('Home')}
        >
          <Ionicons name="home" size={24} color="#007AFF" />
        </TouchableOpacity>
      </View>
      
      <ScrollView style={styles.content} contentContainerStyle={styles.contentContainer}>
        <View style={[styles.resultCard, { borderColor: resultColor }]}>
          <Ionicons name={resultIcon} size={64} color={resultColor} />
          
          <Text style={[styles.resultTitle, { color: resultColor }]}>
            {resultText}
          </Text>
          
          <Text style={styles.confidenceText}>
            Confidence: {confidencePercentage}%
          </Text>
          
          {result.rawPrediction && (
            <View style={styles.rawPredictionContainer}>
              <Text style={styles.rawPredictionLabel}>Raw Prediction:</Text>
              <Text style={styles.rawPredictionValue}>{result.rawPrediction}</Text>
            </View>
          )}
        </View>
        
        <View style={styles.messageCard}>
          <Text style={styles.messageTitle}>Analysis Details</Text>
          <Text style={styles.messageText}>{result.message}</Text>
        </View>
        
        <View style={styles.infoCard}>
          <Text style={styles.infoTitle}>What does this mean?</Text>
          <Text style={styles.infoText}>
            {isAI ? (
              "Our analysis indicates that this audio was likely generated by AI or has been manipulated. The audio contains patterns consistent with synthetic speech generation."
            ) : (
              "Our analysis indicates that this audio was likely recorded from a genuine human voice. No patterns consistent with synthetic speech were detected."
            )}
          </Text>
        </View>
        
        <TouchableOpacity
          style={styles.newAnalysisButton}
          onPress={() => navigation.navigate('Home')}
        >
          <Text style={styles.newAnalysisButtonText}>Analyze Another Audio</Text>
        </TouchableOpacity>
      </ScrollView>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#F2F2F7',
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    padding: 16,
    borderBottomWidth: 1,
    borderBottomColor: '#E5E5EA',
    backgroundColor: 'white',
  },
  backButton: {
    padding: 8,
  },
  headerTitle: {
    fontSize: 18,
    fontWeight: '600',
  },
  homeButton: {
    padding: 8,
  },
  content: {
    flex: 1,
  },
  contentContainer: {
    padding: 20,
    paddingBottom: 40,
  },
  resultCard: {
    backgroundColor: 'white',
    borderRadius: 12,
    padding: 24,
    alignItems: 'center',
    marginBottom: 16,
    borderWidth: 2,
  },
  resultTitle: {
    fontSize: 28,
    fontWeight: 'bold',
    marginTop: 16,
    marginBottom: 8,
  },
  confidenceText: {
    fontSize: 18,
    color: '#666',
    marginBottom: 8,
  },
  rawPredictionContainer: {
    flexDirection: 'row',
    marginTop: 8,
    alignItems: 'center',
  },
  rawPredictionLabel: {
    fontSize: 14,
    color: '#666',
    marginRight: 4,
  },
  rawPredictionValue: {
    fontSize: 14,
    fontWeight: '600',
  },
  messageCard: {
    backgroundColor: 'white',
    borderRadius: 12,
    padding: 20,
    marginBottom: 16,
  },
  messageTitle: {
    fontSize: 18,
    fontWeight: '600',
    marginBottom: 12,
    color: '#333',
  },
  messageText: {
    fontSize: 16,
    lineHeight: 24,
    color: '#666',
  },
  infoCard: {
    backgroundColor: 'white',
    borderRadius: 12,
    padding: 20,
    marginBottom: 24,
  },
  infoTitle: {
    fontSize: 18,
    fontWeight: '600',
    marginBottom: 12,
    color: '#333',
  },
  infoText: {
    fontSize: 16,
    lineHeight: 24,
    color: '#666',
  },
  newAnalysisButton: {
    backgroundColor: '#007AFF',
    paddingVertical: 16,
    borderRadius: 12,
    alignItems: 'center',
  },
  newAnalysisButtonText: {
    color: 'white',
    fontSize: 18,
    fontWeight: '600',
  },
});

export default ResultScreen;